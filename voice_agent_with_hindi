#pip install --upgrade transformers accelerate

import openai
import streamlit as st
import speech_recognition as sr
import os
import time
import torch
import torchaudio
from transformers import VitsModel, AutoTokenizer

# Load the TTS model and tokenizer
model = VitsModel.from_pretrained("facebook/mms-tts-hin")
tokenizer = AutoTokenizer.from_pretrained("facebook/mms-tts-hin")

# Set OpenAI API Key
openai.api_key = 'api_key_here'


def speak(text):
    """Convert text to speech using Facebook's VITS model and play the generated audio."""
    inputs = tokenizer(text, return_tensors="pt")
    with torch.no_grad():
        output = model(**inputs).waveform  # Generate speech waveform

    # Save the output audio
    output_file = "response.wav"
    torchaudio.save(output_file, output, sample_rate=16000)  # Save the waveform with sample rate

    # Play the audio
    os.system(f"afplay {output_file}")  # macOS (Use 'aplay' for Linux)

def listen():
    """Listen for voice input and return the recognized text."""
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        st.info("Listening for your question...")
        audio = recognizer.listen(source)
    
    try:
        st.info("Recognizing...")
        query = recognizer.recognize_google(audio)
        return query
    except sr.UnknownValueError:
        st.error("Sorry, I could not understand your speech. Please try again.")
        return None
    except sr.RequestError:
        st.error("Speech recognition service is unavailable.")
        return None

def get_gpt_response(query):
    """Get a response from OpenAI's GPT model."""
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "generate your resposne in hindi text only written in hindi characters only"},
                {"role": "user", "content": query},
            ],
        )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        return f"Error: {str(e)}"

# Streamlit UI
st.title("Voice-Enabled Chat with GPT (Hindi TTS)")
st.write("Ask a question using text or voice!")

user_input = st.text_input("Enter your question:")
if st.button("Submit"):
    if user_input:
        response = get_gpt_response(user_input)
        st.success(response)
        speak(response)

# Use session state to keep track of listening mode
if "listening" not in st.session_state:
    st.session_state.listening = False

# Toggle button for continuous listening
if st.button("Start/Stop Listening"):
    st.session_state.listening = not st.session_state.listening

if st.session_state.listening:
    st.warning("Listening mode is ON. Say something!")
    while st.session_state.listening:
        query = listen()
        if query:
            st.text(f"You said: {query}")
            response = get_gpt_response(query)
            st.success(response)
            speak(response)
        time.sleep(1)  # Prevent excessive looping
